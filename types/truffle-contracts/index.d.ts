/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { AccessControlContract } from "./AccessControl";
import { AccessControlEnumerableContract } from "./AccessControlEnumerable";
import { BetterNFTContract } from "./BetterNFT";
import { ERC165Contract } from "./ERC165";
import { ERC721Contract } from "./ERC721";
import { ERC721BurnableContract } from "./ERC721Burnable";
import { ERC721EnumerableContract } from "./ERC721Enumerable";
import { ERC721PausableContract } from "./ERC721Pausable";
import { ERC721PresetMinterPauserAutoIdContract } from "./ERC721PresetMinterPauserAutoId";
import { IAccessControlContract } from "./IAccessControl";
import { IAccessControlEnumerableContract } from "./IAccessControlEnumerable";
import { IERC165Contract } from "./IERC165";
import { IERC721Contract } from "./IERC721";
import { IERC721EnumerableContract } from "./IERC721Enumerable";
import { IERC721MetadataContract } from "./IERC721Metadata";
import { IERC721ReceiverContract } from "./IERC721Receiver";
import { PausableContract } from "./Pausable";

declare global {
  namespace Truffle {
    interface Artifacts {
      require(name: "AccessControl"): AccessControlContract;
      require(name: "AccessControlEnumerable"): AccessControlEnumerableContract;
      require(name: "BetterNFT"): BetterNFTContract;
      require(name: "ERC165"): ERC165Contract;
      require(name: "ERC721"): ERC721Contract;
      require(name: "ERC721Burnable"): ERC721BurnableContract;
      require(name: "ERC721Enumerable"): ERC721EnumerableContract;
      require(name: "ERC721Pausable"): ERC721PausableContract;
      require(
        name: "ERC721PresetMinterPauserAutoId"
      ): ERC721PresetMinterPauserAutoIdContract;
      require(name: "IAccessControl"): IAccessControlContract;
      require(
        name: "IAccessControlEnumerable"
      ): IAccessControlEnumerableContract;
      require(name: "IERC165"): IERC165Contract;
      require(name: "IERC721"): IERC721Contract;
      require(name: "IERC721Enumerable"): IERC721EnumerableContract;
      require(name: "IERC721Metadata"): IERC721MetadataContract;
      require(name: "IERC721Receiver"): IERC721ReceiverContract;
      require(name: "Pausable"): PausableContract;
    }
  }
}

export { AccessControlContract, AccessControlInstance } from "./AccessControl";
export {
  AccessControlEnumerableContract,
  AccessControlEnumerableInstance,
} from "./AccessControlEnumerable";
export { BetterNFTContract, BetterNFTInstance } from "./BetterNFT";
export { ERC165Contract, ERC165Instance } from "./ERC165";
export { ERC721Contract, ERC721Instance } from "./ERC721";
export {
  ERC721BurnableContract,
  ERC721BurnableInstance,
} from "./ERC721Burnable";
export {
  ERC721EnumerableContract,
  ERC721EnumerableInstance,
} from "./ERC721Enumerable";
export {
  ERC721PausableContract,
  ERC721PausableInstance,
} from "./ERC721Pausable";
export {
  ERC721PresetMinterPauserAutoIdContract,
  ERC721PresetMinterPauserAutoIdInstance,
} from "./ERC721PresetMinterPauserAutoId";
export {
  IAccessControlContract,
  IAccessControlInstance,
} from "./IAccessControl";
export {
  IAccessControlEnumerableContract,
  IAccessControlEnumerableInstance,
} from "./IAccessControlEnumerable";
export { IERC165Contract, IERC165Instance } from "./IERC165";
export { IERC721Contract, IERC721Instance } from "./IERC721";
export {
  IERC721EnumerableContract,
  IERC721EnumerableInstance,
} from "./IERC721Enumerable";
export {
  IERC721MetadataContract,
  IERC721MetadataInstance,
} from "./IERC721Metadata";
export {
  IERC721ReceiverContract,
  IERC721ReceiverInstance,
} from "./IERC721Receiver";
export { PausableContract, PausableInstance } from "./Pausable";
